{"camera":{"position":[0.46749641693254074,3.7136632311619877,34.71174405719273],"target":[0,0,0],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":"teapot","position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW"},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"//vertex position in world coordinates\nattribute vec3 vertex_worldSpace;\n//surface normal at the vertex in world coordinates\nattribute vec3 normal_worldSpace;\n//texture coordinates at that vertex\nattribute vec2 textureCoordinate_input;\n\n//model Matrix (Identity in our case)\nuniform mat4 mMatrix;\n//view Matrix\nuniform mat4 vMatrix;\n//projection Matrix\nuniform mat4 pMatrix;\nuniform vec3 cameraPos;\n\n//main program for each vertex\nvoid main() {\n  vec4 vertex_camSpace = vMatrix * mMatrix * vec4(vertex_worldSpace, 1.0);\n  gl_Position = pMatrix * vertex_camSpace;\n\n\n}"},"fragment":{"source":"//for better performance less precision\nprecision mediump float;\n\n//main program for each fragment = pixel candidate\nvoid main() {\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"cameraPos":{"attachment":"Camera Position"}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"//vertex coordinates in world space for the render quad\nattribute vec3 vertex_worldSpace;\n//texture coordinate for this vertex and the render quad\nattribute vec2 textureCoordinate_input;\n\n//texture coordinate needs to be passed on to the R2T fragment shader\nvarying vec2 varyingTextureCoordinate;\n\n//main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertex_worldSpace, 1.0);\n  varyingTextureCoordinate = textureCoordinate_input;\n}"},"fragment":{"source":"precision mediump float;\n\n//a texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n//texture coordinates coming from the vertex shader, interpolated through the rasterizer\nvarying vec2 varyingTextureCoordinate;\n\n//main program for each fragment of the render quad\nvoid main() {\n  \n  float s[12];\n  s[0] = -0.10568; s[1] = -0.07568; s[2] = -0.042158;\n  s[3] = -0.02458; s[4] = -0.01987456; s[5] = -0.0112458;\n  s[6] = 0.0112458; s[7] = 0.01987456; s[8] = 0.02458;\n  s[9] = 0.042158; s[10] = 0.07568; s[11] = 0.10568;\n  float d_max = 0.3;\n\n  // calculate p_norm\n  vec2 p_norm = normalize(vec2(0.5,0.5) - varyingTextureCoordinate);\n\n  vec3 rgb_blur;\n  for (int i = 0; i <= 11; ++i) {\n    float d_i = s[i]*d_max;\n    vec4 sum = texture2D(textureRendered, ((varyingTextureCoordinate) + (p_norm) * d_i));\n    rgb_blur = rgb_blur + sum.rgb; \n  }\n  rgb_blur = rgb_blur / 12.;\n\n  gl_FragColor = vec4(rgb_blur,1.0);\n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"}}}}}},"output":{"image":"Quad/R2T Pass color"}}